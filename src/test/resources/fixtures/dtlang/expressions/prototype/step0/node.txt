 > create:
atom:2
<<<seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)>>>


 > create:
fun:3
<<<seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)>>>


 > create:
expr:4 cachable
seq (
  <<<let (x, 5)>>>,
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
atom:5
seq (
  <<<let (x, 5)>>>,
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
fun:6
seq (
  <<<let (x, 5)>>>,
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
expr:7 cachable
seq (
  let (<<<x>>>, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
atom:8
seq (
  let (<<<x>>>, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
path:9
seq (
  let (<<<x>>>, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
segment:10
seq (
  let (<<<x>>>, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
expr:11 cachable
seq (
  let (x, <<<5>>>),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
atom:12
seq (
  let (x, <<<5>>>),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
13...

 > create:
expr:13 cachable
seq (
  let (x, 5),
  <<<let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4)>>>,
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:14
seq (
  let (x, 5),
  <<<let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4)>>>,
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
fun:15
seq (
  let (x, 5),
  <<<let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4)>>>,
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
expr:16 cachable
seq (
  let (x, 5),
  let (<<<client.account[type:in.account[1].type][1].sum>>>, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:17
seq (
  let (x, 5),
  let (<<<client.account[type:in.account[1].type][1].sum>>>, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
path:18
seq (
  let (x, 5),
  let (<<<client.account[type:in.account[1].type][1].sum>>>, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
segment:19
seq (
  let (x, 5),
  let (<<<client>>>.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
segment:20
seq (
  let (x, 5),
  let (client.<<<account[type:in.account[1].type][1]>>>.sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
index:21
seq (
  let (x, 5),
  let (client.account<<<[type:in.account[1].type]>>>[1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
expr:22 cachable
seq (
  let (x, 5),
  let (client.account[type:<<<in.account[1].type>>>][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:23
seq (
  let (x, 5),
  let (client.account[type:<<<in.account[1].type>>>][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
path:24
seq (
  let (x, 5),
  let (client.account[type:<<<in.account[1].type>>>][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
segment:25
seq (
  let (x, 5),
  let (client.account[type:<<<in>>>.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
segment:26
seq (
  let (x, 5),
  let (client.account[type:in.<<<account[1]>>>.type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
index:27
seq (
  let (x, 5),
  let (client.account[type:in.account<<<[1]>>>.type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
expr:28 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[<<<1>>>].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:29
seq (
  let (x, 5),
  let (client.account[type:in.account[<<<1>>>].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
segment:30
seq (
  let (x, 5),
  let (client.account[type:in.account[1].<<<type>>>][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
index:31
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type]<<<[1]>>>.sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
expr:32 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][<<<1>>>].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:33
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][<<<1>>>].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
segment:34
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].<<<sum>>>, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
expr:35 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, <<<in.sum+100_0001 + 1+ 2*3%4>>>),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
+:36
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1<<<+>>> 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
+:37
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 <<<+>>> 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
+:38
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum<<<+>>>100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:39
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, <<<in.sum>>>+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
path:40
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, <<<in.sum>>>+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
segment:41
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, <<<in>>>.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
segment:42
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.<<<sum>>>+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:43
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+<<<100_0001>>> + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:44
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + <<<1>>>+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
%:45
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3<<<%>>>4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
*:46
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2<<<*>>>3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:47
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ <<<2>>>*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:48
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*<<<3>>>%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
atom:49
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%<<<4>>>),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
14...

 > create:
expr:50 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  <<<let (client.surname, "Mr."||in.surname||1+2*3%4)>>>, /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
atom:51
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  <<<let (client.surname, "Mr."||in.surname||1+2*3%4)>>>, /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
fun:52
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  <<<let (client.surname, "Mr."||in.surname||1+2*3%4)>>>, /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
expr:53 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (<<<client.surname>>>, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
atom:54
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (<<<client.surname>>>, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
path:55
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (<<<client.surname>>>, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
segment:56
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (<<<client>>>.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
segment:57
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.<<<surname>>>, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
expr:58 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, <<<"Mr."||in.surname||1+2*3%4>>>), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
||:59
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname<<<||>>>1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
||:60
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."<<<||>>>in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
atom:61
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, <<<"Mr.">>>||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
atom:62
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||<<<in.surname>>>||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
path:63
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||<<<in.surname>>>||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
segment:64
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||<<<in>>>.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
segment:65
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.<<<surname>>>||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
+:66
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1<<<+>>>2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
atom:67
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||<<<1>>>+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
%:68
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3<<<%>>>4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
*:69
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2<<<*>>>3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
atom:70
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+<<<2>>>*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
atom:71
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*<<<3>>>%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
atom:72
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%<<<4>>>), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
15...

 > create:
expr:73 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  <<<let (client.surname, "Mr."~in.surname~1+2*3%4)>>>,  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
atom:74
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  <<<let (client.surname, "Mr."~in.surname~1+2*3%4)>>>,  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
fun:75
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  <<<let (client.surname, "Mr."~in.surname~1+2*3%4)>>>,  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
expr:76 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (<<<client.surname>>>, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
atom:77
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (<<<client.surname>>>, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
path:78
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (<<<client.surname>>>, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
segment:79
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (<<<client>>>.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
segment:80
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.<<<surname>>>, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
expr:81 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, <<<"Mr."~in.surname~1+2*3%4>>>),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
~:82
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname<<<~>>>1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
~:83
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."<<<~>>>in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
atom:84
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, <<<"Mr.">>>~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
atom:85
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~<<<in.surname>>>~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
path:86
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~<<<in.surname>>>~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
segment:87
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~<<<in>>>.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
segment:88
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.<<<surname>>>~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
+:89
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1<<<+>>>2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
atom:90
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~<<<1>>>+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
%:91
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3<<<%>>>4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
*:92
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2<<<*>>>3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
atom:93
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+<<<2>>>*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
atom:94
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*<<<3>>>%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
atom:95
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%<<<4>>>),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
16...

 > create:
expr:96 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  <<<let (client.surname, "Mr."^in.surname^1+2*3%4)>>>,
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
atom:97
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  <<<let (client.surname, "Mr."^in.surname^1+2*3%4)>>>,
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
fun:98
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  <<<let (client.surname, "Mr."^in.surname^1+2*3%4)>>>,
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
expr:99 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (<<<client.surname>>>, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
atom:100
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (<<<client.surname>>>, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
path:101
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (<<<client.surname>>>, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
segment:102
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (<<<client>>>.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
segment:103
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.<<<surname>>>, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
expr:104 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, <<<"Mr."^in.surname^1+2*3%4>>>),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
^:105
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname<<<^>>>1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
^:106
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."<<<^>>>in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
atom:107
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, <<<"Mr.">>>^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
atom:108
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^<<<in.surname>>>^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
path:109
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^<<<in.surname>>>^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
segment:110
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^<<<in>>>.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
segment:111
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.<<<surname>>>^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
+:112
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1<<<+>>>2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
atom:113
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^<<<1>>>+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
%:114
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3<<<%>>>4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
*:115
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2<<<*>>>3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
atom:116
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+<<<2>>>*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
atom:117
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*<<<3>>>%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
atom:118
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%<<<4>>>),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
17...

 > create:
expr:119 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  <<<switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  )>>>,
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:120
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  <<<switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  )>>>,
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
fun:121
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  <<<switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  )>>>,
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:122 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    <<<case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    )>>>,
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
25...

 > create:
atom:123
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    <<<case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    )>>>,
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
25...

 > create:
fun:124
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    <<<case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    )>>>,
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
25...

 > create:
expr:125 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      <<<date("2016-03-04")-today()>month(5)>>>,
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
>:126
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()<<<>>>>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
-:127
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")<<<->>>today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
atom:128
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      <<<date("2016-03-04")>>>-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
fun:129
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      <<<date("2016-03-04")>>>-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
expr:130 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date(<<<"2016-03-04">>>)-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
atom:131
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date(<<<"2016-03-04">>>)-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
atom:132
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-<<<today()>>>>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
fun:133
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-<<<today()>>>>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
atom:134
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()><<<month(5)>>>,
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
fun:135
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()><<<month(5)>>>,
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
expr:136 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(<<<5>>>),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
atom:137
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(<<<5>>>),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
20...

 > create:
expr:138 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      <<<seq (
        return (),
        break ()
      )>>>
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
24...

 > create:
atom:139
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      <<<seq (
        return (),
        break ()
      )>>>
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
24...

 > create:
fun:140
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      <<<seq (
        return (),
        break ()
      )>>>
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
24...

 > create:
expr:141 cachable
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        <<<return ()>>>,
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
22...

 > create:
atom:142
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        <<<return ()>>>,
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
22...

 > create:
fun:143
seq (
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        <<<return ()>>>,
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
22...

 > create:
expr:144 cachable
...1
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        <<<break ()>>>
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
23...

 > create:
atom:145
...1
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        <<<break ()>>>
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
23...

 > create:
fun:146
...1
  let (x, 5),
  let (client.account[type:in.account[1].type][1].sum, in.sum+100_0001 + 1+ 2*3%4),
  let (client.surname, "Mr."||in.surname||1+2*3%4), /* choose one variant of concatenation */
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        <<<break ()>>>
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
23...

 > create:
expr:147 cachable
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    <<<case (22+size(x) = 0, continue())>>>,
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
atom:148
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    <<<case (22+size(x) = 0, continue())>>>,
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
fun:149
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    <<<case (22+size(x) = 0, continue())>>>,
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
expr:150 cachable
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (<<<22+size(x) = 0>>>, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
=:151
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) <<<=>>> 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
+:152
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22<<<+>>>size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
atom:153
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (<<<22>>>+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
atom:154
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+<<<size(x)>>> = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
fun:155
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+<<<size(x)>>> = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
expr:156 cachable
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(<<<x>>>) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
atom:157
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(<<<x>>>) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
path:158
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(<<<x>>>) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
segment:159
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(<<<x>>>) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
atom:160
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = <<<0>>>, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
expr:161 cachable
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, <<<continue()>>>),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
atom:162
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, <<<continue()>>>),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
fun:163
...4
  let (client.surname, "Mr."~in.surname~1+2*3%4),  // which one is the best || ~ # ^
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, <<<continue()>>>),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
26...

 > create:
expr:164 cachable
...5
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    <<<case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )>>>
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:165
...5
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    <<<case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )>>>
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
fun:166
...5
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    <<<case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )>>>
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:167 cachable
...5
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (<<<true>>>,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
27...

 > create:
atom:168
...5
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (<<<true>>>,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
27...

 > create:
path:169
...5
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (<<<true>>>,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
27...

 > create:
segment:170
...5
  let (client.surname, "Mr."^in.surname^1+2*3%4),
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (<<<true>>>,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
27...

 > create:
expr:171 cachable
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      <<<for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )>>>
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:172
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      <<<for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )>>>
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
fun:173
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      <<<for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )>>>
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:174 cachable
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (<<<i>>>, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
28...

 > create:
atom:175
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (<<<i>>>, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
28...

 > create:
path:176
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (<<<i>>>, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
28...

 > create:
segment:177
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (<<<i>>>, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
28...

 > create:
expr:178 cachable
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, <<<1>>>, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
28...

 > create:
atom:179
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, <<<1>>>, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
28...

 > create:
expr:180 cachable
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, <<<50>>>,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
28...

 > create:
atom:181
...6
  switch (
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, <<<50>>>,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
28...

 > create:
expr:182 cachable
...7
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        <<<seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )>>>
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:183
...7
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        <<<seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )>>>
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
fun:184
...7
    case (
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        <<<seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )>>>
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:185 cachable
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          <<<let (x, x+1)>>>,
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
atom:186
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          <<<let (x, x+1)>>>,
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
fun:187
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          <<<let (x, x+1)>>>,
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
expr:188 cachable
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (<<<x>>>, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
atom:189
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (<<<x>>>, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
path:190
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (<<<x>>>, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
segment:191
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (<<<x>>>, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
expr:192 cachable
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, <<<x+1>>>),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
+:193
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x<<<+>>>1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
atom:194
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, <<<x>>>+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
path:195
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, <<<x>>>+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
segment:196
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, <<<x>>>+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
atom:197
...8
      date("2016-03-04")-today()>month(5),
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+<<<1>>>),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
30...

 > create:
expr:198 cachable
...9
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          <<<switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )>>>
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:199
...9
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          <<<switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )>>>
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
fun:200
...9
      seq (
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          <<<switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )>>>
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:201 cachable
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            <<<case (x>10, continue (i))>>>,
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
atom:202
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            <<<case (x>10, continue (i))>>>,
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
fun:203
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            <<<case (x>10, continue (i))>>>,
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
expr:204 cachable
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (<<<x>10>>>, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
>:205
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x<<<>>>>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
atom:206
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (<<<x>>>>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
path:207
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (<<<x>>>>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
segment:208
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (<<<x>>>>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
atom:209
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x><<<10>>>, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
expr:210 cachable
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, <<<continue (i)>>>),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
atom:211
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, <<<continue (i)>>>),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
fun:212
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, <<<continue (i)>>>),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
expr:213 cachable
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (<<<i>>>)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
atom:214
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (<<<i>>>)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
path:215
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (<<<i>>>)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
segment:216
...10
        return (),
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (<<<i>>>)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
32...

 > create:
expr:217 cachable
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            <<<case (x<0, call (doIt))>>>
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
atom:218
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            <<<case (x<0, call (doIt))>>>
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
fun:219
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            <<<case (x<0, call (doIt))>>>
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
expr:220 cachable
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (<<<x<0>>>, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
<:221
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<<<<>>>0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
atom:222
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (<<<x>>><0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
path:223
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (<<<x>>><0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
segment:224
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (<<<x>>><0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
atom:225
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<<<<0>>>, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
expr:226 cachable
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, <<<call (doIt)>>>)
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
atom:227
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, <<<call (doIt)>>>)
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
fun:228
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, <<<call (doIt)>>>)
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
expr:229 cachable
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (<<<doIt>>>))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
atom:230
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (<<<doIt>>>))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
path:231
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (<<<doIt>>>))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
segment:232
...11
        break ()
      )
    ),
    case (22+size(x) = 0, continue()),
    case (true,
      for (i, 1, 50,
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (<<<doIt>>>))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)
33...

 > create:
expr:233 cachable
...17
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  <<<let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )>>>
)


 > create:
atom:234
...17
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  <<<let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )>>>
)


 > create:
fun:235
...17
        seq (
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  <<<let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )>>>
)


 > create:
expr:236 cachable
...18
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    <<<y>>>,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:237
...18
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    <<<y>>>,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
path:238
...18
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    <<<y>>>,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
segment:239
...18
          let (x, x+1),
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    <<<y>>>,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:240 cachable
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    <<<min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())>>>
  )
)


 > create:
&:241
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) <<<&>>> ! (true () | false ())
  )
)


 > create:
>=:242
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) <<<>=>>> round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:243
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    <<<min(max((1+2*3)/4, 0), 10)>>> >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
fun:244
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    <<<min(max((1+2*3)/4, 0), 10)>>> >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:245 cachable
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(<<<max((1+2*3)/4, 0)>>>, 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:246
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(<<<max((1+2*3)/4, 0)>>>, 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
fun:247
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(<<<max((1+2*3)/4, 0)>>>, 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:248 cachable
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max(<<<(1+2*3)/4>>>, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
/:249
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)<<</>>>4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
+:250
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1<<<+>>>2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:251
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((<<<1>>>+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
*:252
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2<<<*>>>3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:253
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+<<<2>>>*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:254
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*<<<3>>>)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:255
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/<<<4>>>, 0), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:256 cachable
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, <<<0>>>), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:257
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, <<<0>>>), 10) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
expr:258 cachable
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), <<<10>>>) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:259
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), <<<10>>>) >= round(5.555_555__, 1) & ! (true () | false ())
  )
)


 > create:
atom:260
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= <<<round(5.555_555__, 1)>>> & ! (true () | false ())
  )
)


 > create:
fun:261
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= <<<round(5.555_555__, 1)>>> & ! (true () | false ())
  )
)


 > create:
expr:262 cachable
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(<<<5.555_555__>>>, 1) & ! (true () | false ())
  )
)


 > create:
atom:263
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(<<<5.555_555__>>>, 1) & ! (true () | false ())
  )
)


 > create:
expr:264 cachable
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, <<<1>>>) & ! (true () | false ())
  )
)


 > create:
atom:265
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, <<<1>>>) & ! (true () | false ())
  )
)


 > create:
!:266
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & <<<!>>> (true () | false ())
  )
)


 > create:
|:267
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () <<<|>>> false ())
  )
)


 > create:
atom:268
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (<<<true ()>>> | false ())
  )
)


 > create:
fun:269
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (<<<true ()>>> | false ())
  )
)


 > create:
atom:270
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | <<<false ()>>>)
  )
)


 > create:
fun:271
...19
          switch (
            case (x>10, continue (i)),
            case (x<0, call (doIt))
          )
        )
      )
    )
  ),
  let (
    y,
    min(max((1+2*3)/4, 0), 10) >= round(5.555_555__, 1) & ! (true () | <<<false ()>>>)
  )
)


 > merge:
expr 1 {
  result: atom 2 >> 1 {
    fun: fun 3 >> 2 {
      expr: expr 4 cachable >> 3 {
        result: atom 5 >> 4 {
          fun: fun 6 >> 5 {
            expr: expr 7 cachable >> 6 {
              result: atom 8 >> 7 {
                path: path 9 >> 8 {
                  segment: segment 10 >> 9 {
                    name: x
                  }
                }
              }
            }
            expr: expr 11 cachable >> 6 {
              result: atom 12 >> 11
            }
          }
        }
      }
      expr: expr 13 cachable >> 3 {
        result: atom 14 >> 13 {
          fun: fun 15 >> 14 {
            expr: expr 16 cachable >> 15 {
              result: atom 17 >> 16 {
                path: path 18 >> 17 {
                  segment: segment 19 >> 18 {
                    name: client
                  }
                  segment: segment 20 >> 18 {
                    name: account
                    index: index 21 >> 20 {
                      filter: expr 22 cachable >> 21 {
                        result: atom 23 >> 22 {
                          path: path 24 >> 23 {
                            segment: segment 25 >> 24 {
                              name: in
                            }
                            segment: segment 26 >> 24 {
                              name: account
                              index: index 27 >> 26 {
                                filter: expr 28 cachable >> 27 {
                                  result: atom 29 >> 28
                                }
                              }
                            }
                            segment: segment 30 >> 24 {
                              name: type
                            }
                          }
                        }
                      }
                    }
                    index: index 31 >> 20 {
                      filter: expr 32 cachable >> 31 {
                        result: atom 33 >> 32
                      }
                    }
                  }
                  segment: segment 34 >> 18 {
                    name: sum
                  }
                }
              }
            }
            expr: expr 35 cachable >> 15 {
              result: + 36 >> 35 {
                left: + 37 >> 36 {
                  left: + 38 >> 37 {
                    left: atom 39 >> 38 {
                      path: path 40 >> 39 {
                        segment: segment 41 >> 40 {
                          name: in
                        }
                        segment: segment 42 >> 40 {
                          name: sum
                        }
                      }
                    }
                    right: atom 43 >> 38
                  }
                  right: atom 44 >> 37
                }
                right: % 45 >> 36 {
                  left: * 46 >> 45 {
                    left: atom 47 >> 46
                    right: atom 48 >> 46
                  }
                  right: atom 49 >> 45
                }
              }
            }
          }
        }
      }
      expr: expr 50 cachable >> 3 {
        result: atom 51 >> 50 {
          fun: fun 52 >> 51 {
            expr: expr 53 cachable >> 52 {
              result: atom 54 >> 53 {
                path: path 55 >> 54 {
                  segment: segment 56 >> 55 {
                    name: client
                  }
                  segment: segment 57 >> 55 {
                    name: surname
                  }
                }
              }
            }
            expr: expr 58 cachable >> 52 {
              result: || 59 >> 58 {
                left: || 60 >> 59 {
                  left: atom 61 >> 60
                  right: atom 62 >> 60 {
                    path: path 63 >> 62 {
                      segment: segment 64 >> 63 {
                        name: in
                      }
                      segment: segment 65 >> 63 {
                        name: surname
                      }
                    }
                  }
                }
                right: + 66 >> 59 {
                  left: atom 67 >> 66
                  right: % 68 >> 66 {
                    left: * 69 >> 68 {
                      left: atom 70 >> 69
                      right: atom 71 >> 69
                    }
                    right: atom 72 >> 68
                  }
                }
              }
            }
          }
        }
      }
      expr: expr 73 cachable >> 3 {
        result: atom 74 >> 73 {
          fun: fun 75 >> 74 {
            expr: expr 76 cachable >> 75 {
              result: atom 77 >> 76 {
                path: path 78 >> 77 {
                  segment: segment 79 >> 78 {
                    name: client
                  }
                  segment: segment 80 >> 78 {
                    name: surname
                  }
                }
              }
            }
            expr: expr 81 cachable >> 75 {
              result: ~ 82 >> 81 {
                left: ~ 83 >> 82 {
                  left: atom 84 >> 83
                  right: atom 85 >> 83 {
                    path: path 86 >> 85 {
                      segment: segment 87 >> 86 {
                        name: in
                      }
                      segment: segment 88 >> 86 {
                        name: surname
                      }
                    }
                  }
                }
                right: + 89 >> 82 {
                  left: atom 90 >> 89
                  right: % 91 >> 89 {
                    left: * 92 >> 91 {
                      left: atom 93 >> 92
                      right: atom 94 >> 92
                    }
                    right: atom 95 >> 91
                  }
                }
              }
            }
          }
        }
      }
      expr: expr 96 cachable >> 3 {
        result: atom 97 >> 96 {
          fun: fun 98 >> 97 {
            expr: expr 99 cachable >> 98 {
              result: atom 100 >> 99 {
                path: path 101 >> 100 {
                  segment: segment 102 >> 101 {
                    name: client
                  }
                  segment: segment 103 >> 101 {
                    name: surname
                  }
                }
              }
            }
            expr: expr 104 cachable >> 98 {
              result: ^ 105 >> 104 {
                left: ^ 106 >> 105 {
                  left: atom 107 >> 106
                  right: atom 108 >> 106 {
                    path: path 109 >> 108 {
                      segment: segment 110 >> 109 {
                        name: in
                      }
                      segment: segment 111 >> 109 {
                        name: surname
                      }
                    }
                  }
                }
                right: + 112 >> 105 {
                  left: atom 113 >> 112
                  right: % 114 >> 112 {
                    left: * 115 >> 114 {
                      left: atom 116 >> 115
                      right: atom 117 >> 115
                    }
                    right: atom 118 >> 114
                  }
                }
              }
            }
          }
        }
      }
      expr: expr 119 cachable >> 3 {
        result: atom 120 >> 119 {
          fun: fun 121 >> 120 {
            expr: expr 122 cachable >> 121 {
              result: atom 123 >> 122 {
                fun: fun 124 >> 123 {
                  expr: expr 125 cachable >> 124 {
                    result: > 126 >> 125 {
                      left: - 127 >> 126 {
                        left: atom 128 >> 127 {
                          fun: fun 129 >> 128 {
                            expr: expr 130 cachable >> 129 {
                              result: atom 131 >> 130
                            }
                          }
                        }
                        right: atom 132 >> 127 {
                          fun: fun 133 >> 132
                        }
                      }
                      right: atom 134 >> 126 {
                        fun: fun 135 >> 134 {
                          expr: expr 136 cachable >> 135 {
                            result: atom 137 >> 136
                          }
                        }
                      }
                    }
                  }
                  expr: expr 138 cachable >> 124 {
                    result: atom 139 >> 138 {
                      fun: fun 140 >> 139 {
                        expr: expr 141 cachable >> 140 {
                          result: atom 142 >> 141 {
                            fun: fun 143 >> 142
                          }
                        }
                        expr: expr 144 cachable >> 140 {
                          result: atom 145 >> 144 {
                            fun: fun 146 >> 145
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
            expr: expr 147 cachable >> 121 {
              result: atom 148 >> 147 {
                fun: fun 149 >> 148 {
                  expr: expr 150 cachable >> 149 {
                    result: = 151 >> 150 {
                      left: + 152 >> 151 {
                        left: atom 153 >> 152
                        right: atom 154 >> 152 {
                          fun: fun 155 >> 154 {
                            expr: expr 156 cachable >> 155 {
                              result: atom 157 >> 156 {
                                path: path 158 >> 157 {
                                  segment: segment 159 >> 158 {
                                    name: x
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                      right: atom 160 >> 151
                    }
                  }
                  expr: expr 161 cachable >> 149 {
                    result: atom 162 >> 161 {
                      fun: fun 163 >> 162
                    }
                  }
                }
              }
            }
            expr: expr 164 cachable >> 121 {
              result: atom 165 >> 164 {
                fun: fun 166 >> 165 {
                  expr: expr 167 cachable >> 166 {
                    result: atom 168 >> 167 {
                      path: path 169 >> 168 {
                        segment: segment 170 >> 169 {
                          name: true
                        }
                      }
                    }
                  }
                  expr: expr 171 cachable >> 166 {
                    result: atom 172 >> 171 {
                      fun: fun 173 >> 172 {
                        expr: expr 174 cachable >> 173 {
                          result: atom 175 >> 174 {
                            path: path 176 >> 175 {
                              segment: segment 177 >> 176 {
                                name: i
                              }
                            }
                          }
                        }
                        expr: expr 178 cachable >> 173 {
                          result: atom 179 >> 178
                        }
                        expr: expr 180 cachable >> 173 {
                          result: atom 181 >> 180
                        }
                        expr: expr 182 cachable >> 173 {
                          result: atom 183 >> 182 {
                            fun: fun 184 >> 183 {
                              expr: expr 185 cachable >> 184 {
                                result: atom 186 >> 185 {
                                  fun: fun 187 >> 186 {
                                    expr: expr 188 cachable >> 187 {
                                      result: atom 189 >> 188 {
                                        path: path 190 >> 189 {
                                          segment: segment 191 >> 190 {
                                            name: x
                                          }
                                        }
                                      }
                                    }
                                    expr: expr 192 cachable >> 187 {
                                      result: + 193 >> 192 {
                                        left: atom 194 >> 193 {
                                          path: path 195 >> 194 {
                                            segment: segment 196 >> 195 {
                                              name: x
                                            }
                                          }
                                        }
                                        right: atom 197 >> 193
                                      }
                                    }
                                  }
                                }
                              }
                              expr: expr 198 cachable >> 184 {
                                result: atom 199 >> 198 {
                                  fun: fun 200 >> 199 {
                                    expr: expr 201 cachable >> 200 {
                                      result: atom 202 >> 201 {
                                        fun: fun 203 >> 202 {
                                          expr: expr 204 cachable >> 203 {
                                            result: > 205 >> 204 {
                                              left: atom 206 >> 205 {
                                                path: path 207 >> 206 {
                                                  segment: segment 208 >> 207 {
                                                    name: x
                                                  }
                                                }
                                              }
                                              right: atom 209 >> 205
                                            }
                                          }
                                          expr: expr 210 cachable >> 203 {
                                            result: atom 211 >> 210 {
                                              fun: fun 212 >> 211 {
                                                expr: expr 213 cachable >> 212 {
                                                  result: atom 214 >> 213 {
                                                    path: path 215 >> 214 {
                                                      segment: segment 216 >> 215 {
                                                        name: i
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                    expr: expr 217 cachable >> 200 {
                                      result: atom 218 >> 217 {
                                        fun: fun 219 >> 218 {
                                          expr: expr 220 cachable >> 219 {
                                            result: < 221 >> 220 {
                                              left: atom 222 >> 221 {
                                                path: path 223 >> 222 {
                                                  segment: segment 224 >> 223 {
                                                    name: x
                                                  }
                                                }
                                              }
                                              right: atom 225 >> 221
                                            }
                                          }
                                          expr: expr 226 cachable >> 219 {
                                            result: atom 227 >> 226 {
                                              fun: fun 228 >> 227 {
                                                expr: expr 229 cachable >> 228 {
                                                  result: atom 230 >> 229 {
                                                    path: path 231 >> 230 {
                                                      segment: segment 232 >> 231 {
                                                        name: doIt
                                                      }
                                                    }
                                                  }
                                                }
                                              }
                                            }
                                          }
                                        }
                                      }
                                    }
                                  }
                                }
                              }
                            }
                          }
                        }
                      }
                    }
                  }
                }
              }
            }
          }
        }
      }
      expr: expr 233 cachable >> 3 {
        result: atom 234 >> 233 {
          fun: fun 235 >> 234 {
            expr: expr 236 cachable >> 235 {
              result: atom 237 >> 236 {
                path: path 238 >> 237 {
                  segment: segment 239 >> 238 {
                    name: y
                  }
                }
              }
            }
            expr: expr 240 cachable >> 235 {
              result: & 241 >> 240 {
                left: >= 242 >> 241 {
                  left: atom 243 >> 242 {
                    fun: fun 244 >> 243 {
                      expr: expr 245 cachable >> 244 {
                        result: atom 246 >> 245 {
                          fun: fun 247 >> 246 {
                            expr: expr 248 cachable >> 247 {
                              result: / 249 >> 248 {
                                left: + 250 >> 249 {
                                  left: atom 251 >> 250
                                  right: * 252 >> 250 {
                                    left: atom 253 >> 252
                                    right: atom 254 >> 252
                                  }
                                }
                                right: atom 255 >> 249
                              }
                            }
                            expr: expr 256 cachable >> 247 {
                              result: atom 257 >> 256
                            }
                          }
                        }
                      }
                      expr: expr 258 cachable >> 244 {
                        result: atom 259 >> 258
                      }
                    }
                  }
                  right: atom 260 >> 242 {
                    fun: fun 261 >> 260 {
                      expr: expr 262 cachable >> 261 {
                        result: atom 263 >> 262
                      }
                      expr: expr 264 cachable >> 261 {
                        result: atom 265 >> 264
                      }
                    }
                  }
                }
                right: ! 266 >> 241 {
                  operand: | 267 >> 266 {
                    left: atom 268 >> 267 {
                      fun: fun 269 >> 268
                    }
                    right: atom 270 >> 267 {
                      fun: fun 271 >> 270
                    }
                  }
                }
              }
            }
          }
        }
      }
    }
  }
}

